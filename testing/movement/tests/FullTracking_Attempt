#include "main.h"
#include "config.hpp"
using namespace pros;
#include <iostream>
#include <cmath>

double xcoord = 0, ycoord = 0;
double global_angle = 0;


double deg_to_rad(double degrees){
  return degrees/180 *M_PI;
}

double rad_to_deg(double radians){
  return radians/M_PI *180;
}

int sgn(double num){
  if (num < 0){
    return -1;
  }
  else if (num > 0){
    return 1;
  }
  else{
    return 0;
  }
}

void tracking (void* param){
 double distance_LR = 14.5; double distance_B = 6.0;
 double radiusR = 0;
 double radiusB = 0;
 double h = 0;
 double h2 = 0;
 double theta = 0; double beta = 0; double alpha = 0;
 double Xx = 0; double Xy = 0; double Yx = 0; double Yy = 0;

 leftencoder.reset(); rightencoder.reset(); backencoder.reset();
 double newleft = 0; double newright = 0; double newback = 0;
 double Right = 0; double Left = 0; double Back = 0;
 double lastleft = 0, lastright = 0, lastback = 0;
 double last_time = 0;

 printf("%d | rightE: %d\n", millis(), rightencoder.get_value());
 printf("%d | leftE: %d\n", millis(), leftencoder.get_value());
 printf("%d | backE: %d\n", millis(), backencoder.get_value());

 while (true) {
//amount encoders moved (radians)
	 newleft = leftencoder.get_value() / 360.0* (2.75*M_PI);
	 newright = rightencoder.get_value() / 360.0* (2.75*M_PI);
	 newback = backencoder.get_value() / 360.0* (2.77*M_PI);
	 Right = newright - lastright;
	 Left = newleft - lastleft;
	 Back = newback - lastback;

//update last
	 lastright = newright;
	 lastleft = newleft;
	 lastback = newback;
	 theta = (Left - Right) / distance_LR;
//if robot turned in any direction
	 if (theta != 0){
		 radiusR = Right / theta;
		 beta = theta / 2.0;
		 h = (2.0*radiusR + distance_LR) * sin(beta);
		 radiusB = Back / theta;
		 h2 = (2.0*radiusB + distance_B) * sin(beta);
	 }
//if robot moved straight or didn't move
	 else {
		 h = Right;
		 h2 = Back;
		 beta = 0;
	 }
		 alpha = global_angle + beta;
//update global x, y and angle
		 Xx = h2 * cos(alpha);
		 Xy = h2 * -sin(alpha);
		 Yx = h * sin(alpha);
		 Yy = h * cos(alpha);
		 xcoord += Yx + Xx;
		 ycoord += Yy + Xy;

     if (global_angle + theta > M_PI){
       global_angle = global_angle - 2*M_PI + theta;
     }
     else if (global_angle + theta < -M_PI){
       global_angle = global_angle + 2*M_PI + theta;
     }
     else{
      global_angle += theta;
     //}

     // global_angle += theta;
     // if (global_angle > M_PI){
     //   global_angle -= 2*M_PI;
     // }
     // else if (global_angle < -M_PI){
     //   global_angle += 2*M_PI;
     // }

		 // if ((millis() - last_time) > 100){
			 printf("%d | X: %f\n", millis(), xcoord);
			 printf("%d | Y: %f\n", millis(), ycoord);
			 printf("%d | A: %f\n", millis(), rad_to_deg(global_angle));
       printf("%d | A2: %f\n", millis(), rad_to_deg((newleft - newright)/distance_LR));
       printf("%d | rightE: %d\n", millis(), rightencoder.get_value());
       printf("%d | leftE: %d\n", millis(), leftencoder.get_value());
       printf("%d | backE: %d\n", millis(), backencoder.get_value());
			 last_time = millis();
		 // }
		 delay(10);
 }
}

void move_drive(int x, int y, int a){

  front_L.move(x + y + a);
  front_R.move(-x + y - a);
  back_L.move(-x + y + a);
  back_R.move(x + y - a);

}

void brake(){
  front_L.move_relative(0, 100);
  front_R.move_relative(0, 100);
  back_L.move_relative(0, 100);
  back_R.move_relative(0, 100);
  delay(300);
}

void opcontrol() {
  delay(6000);
  Task tracking_task(tracking);
  double x2 = 2, y2 = 0, target_a = 0;
  bool toggle = false;
  double error_a, kP_a = 107;
  double error_x, error_y, kP_x = 13;
  double last_error_x  = x2 - xcoord, last_error_y = y2 - ycoord;
  double original_a, new_a;
  double power_a, power_x, power_y;
  double max_power = 80;

while (true){

     power_a = master.get_analog(E_CONTROLLER_ANALOG_RIGHT_X);
     power_x = master.get_analog(E_CONTROLLER_ANALOG_LEFT_X);
     power_y = master.get_analog(E_CONTROLLER_ANALOG_LEFT_Y);

     if (fabs(power_a) < 5){
       power_a = 0;
     }
     if (fabs(power_x) < 5){
       power_x = 0;
     }
     if (fabs(power_y) < 5){
       power_y = 0;
     }

     move_drive(power_x, power_y, power_a);

     if (master.get_digital_new_press(E_CONTROLLER_DIGITAL_A)){
       x2 = xcoord;
       y2 = ycoord;
       target_a = global_angle;
     }
     if (master.get_digital_new_press(E_CONTROLLER_DIGITAL_B)){
       xcoord = 0;
       ycoord = 0;
       global_angle = 0;
     }
		 if (master.get_digital(E_CONTROLLER_DIGITAL_Y)){
			 toggle = true;
       printf("%d | Y was pressed\n", millis());
       printf("target_x |%f", x2);
       printf("target_y |%f", y2);
		 }
		 while (toggle){

//make sure fabs(error_a) is always < 180
				error_a = target_a - global_angle;

        // if (error_a >= 2*M_PI){
        //   error_a -= 2*M_PI;
        // }
        // else if (global_angle <= -2*M_PI){
        //   global_angle += 2*M_PI;
        // }

      // if (fabs(error_a) > 2*M_PI - fabs(error_a)){
      //   error_a = (2*M_PI - fabs(error_a)) *sgn(global_angle);
      // }

        error_x = x2 - xcoord;
        error_y = y2 - ycoord;

        power_a = error_a*kP_a;
        //using global_angle for x and y is wrong becuase it's -180 to 180
        power_x = (error_x*cos(global_angle) - error_y*sin(global_angle))*kP_x;
        power_y = (error_y*cos(global_angle) + error_x*sin(global_angle))*kP_x;

        if (fabs(power_a) > max_power){
          power_a = sgn(power_a)*max_power;
        }
        if (fabs(power_x) > max_power || fabs(power_y) > max_power){
          if (fabs(power_x) > fabs(power_y)){
            double scale = max_power/fabs(power_x);
            power_x = max_power *sgn(power_x);
            power_y = power_y *scale;
          }
          else {
            double scale = max_power/fabs(power_y);
            power_y = max_power *sgn(power_y);
            power_x = power_x *scale;
          }
        }

        if (error_a < 0){
          front_L.move(power_x + power_y + (power_a + error_a*30));
          front_R.move(-power_x + power_y - power_a);
          back_L.move(-power_x + power_y + (power_a + error_a*30));
          back_R.move(power_x + power_y - power_a);
        }
        else{
          front_L.move(power_x + power_y + power_a);
          front_R.move(-power_x + power_y - (power_a + error_a*30));
          back_L.move(-power_x + power_y + power_a);
          back_R.move(power_x + power_y - (power_a + error_a*30));
        }

        //move_drive(power_x, power_y, power_a);


        // printf("%d | power_a: %f\n", millis(), power_a);
        // printf("%d | power_x: %f\n", millis(), power_x);
        // printf("%d | power_y: %f\n", millis(), power_y);
        // printf("%d | er_a: %f\n", millis(), rad_to_deg(error_a));
        // printf("%d | er_x: %f\n", millis(), error_x);
        // printf("%d | er_y: %f\n", millis(), error_y);

				if (fabs(error_a) <= deg_to_rad(0.5) && fabs(error_x) < 0.5 && fabs(error_y) < 0.5){
          brake();
          toggle = false;
				}
        else if (sgn(error_x) != sgn(last_error_x) && sgn(error_y) != sgn(last_error_y)){
          brake();
          toggle = false;
        }
        if (master.get_digital(E_CONTROLLER_DIGITAL_X)){
          brake();
          toggle = false;
        }
        last_error_x = error_x;
        last_error_y = error_y;
        delay(3);
	 	 }

	 }
}
