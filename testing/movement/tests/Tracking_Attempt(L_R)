#include "main.h"
#include <iostream>
#include <cmath>
using namespace pros;
#define PORT_TOPL 1
#define PORT_BOTTOML 2
#define PORT_TOPR 3
#define PORT_BOTTOMR 4
#define PORT_TOPB 5
#define PORT_BOTTOMB 6



/**
 * Runs the operator control code. This function will be started in its own task
 * with the default priority and stack size whenever the robot is enabled via
 * the Field Management System or the VEX Competition Switch in the operator
 * control mode.
 *
 * If no competition control is connected, this function will run immediately
 * following initialize().
 *
 * If the robot is disabled or communications is lost, the
 * operator control task will be stopped. Re-enabling the robot will restart the
 * task, not resume it from where it left off.
 */
void opcontrol() {

	double xcoord = 0; double ycoord = 0;
	int distance = 16;
	double globalangle = 0;
	double radiusS;
	double h;
	double theta;
	double Xx; double Xy; double Yx; double Yy;
	double localx; double localy;
	ADIEncoder leftencoder (PORT_TOPL, PORT_BOTTOML, false);
	ADIEncoder rightencoder (PORT_TOPR, PORT_BOTTOMR, false);
	ADIEncoder backencoder (PORT_TOPB, PORT_BOTTOMB, false);
	leftencoder.reset(); rightencoder.reset(); backencoder.reset();
	int lastleft = 0; int lastright = 0;	int lastback = 0;
	while (true) {
//amount encoders moved (radians)
		int newleft = leftencoder.get_value() / 360* (2.75*M_PI);
		int newright = rightencoder.get_value() / 360* (2.75*M_PI);
		int Right = newright - lastright;
		int Left = newleft - lastleft;
		lastright = newright;
		lastleft = newleft;
//calculating angle that robot moved
		theta = (Left - Right) / distance;
		if (Right == Left){
			localx = 0;
			localy = Right;
			Xx = 0;
			Xy = 0;
			Yx = localy*cos(globalangle);
			Yy = localy*sin(globalangle);
		}
		else {
			radiusS = Right / theta;
			h = (2*radiusS + distance) * sin(theta/2);
	//local x and y
			localx = h*sin(theta/2);
			localy = h*cos(theta/2);
	//finding global x and y changes
			Xx = localx*sin(globalangle);
			Xy = localx*cos(globalangle);
			Yx = localy*cos(globalangle);
			Yy = localy*sin(globalangle);
			globalangle = globalangle + theta;
			xcoord += Xx + Yx;
			ycoord += Xy + Yy;
		}

	}

}
